
# Function to get current Git branch (si dans un repo)
git_branch() {
  local branch
  # vérifie si le dossier .git existe ou qu'on est dans un repo
  if branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null); then
    # si HEAD détaché, affiche commit court
    if [ "$branch" = "HEAD" ]; then
      branch="DETACHED@$(git rev-parse --short HEAD 2>/dev/null)"
    fi
    echo "~ ${branch}"
  fi
}


# Create a desktop launcher for a web app
web2app() {
  if [ "$#" -ne 3 ]; then
    echo "Usage: web2app <AppName> <AppURL> <IconURL> (IconURL must be in PNG -- use https://dashboardicons.com)"
    return 1
  fi

  local APP_NAME="$1"
  local APP_URL="$2"
  local ICON_URL="$3"
  local ICON_DIR="$HOME/.local/share/applications/icons"
  local DESKTOP_FILE="$HOME/.local/share/applications/${APP_NAME}.desktop"
  local ICON_PATH="${ICON_DIR}/${APP_NAME}.png"

  mkdir -p "$ICON_DIR"

  if ! curl -sL -o "$ICON_PATH" "$ICON_URL"; then
    echo "Error: Failed to download icon."
    return 1
  fi

  cat > "$DESKTOP_FILE" <<EOF
[Desktop Entry]
Version=1.0
Name=$APP_NAME
Comment=$APP_NAME
Exec=google-chrome --app="$APP_URL" --name="$APP_NAME" --class="$APP_NAME" --window-size=800,600
Terminal=false
Type=Application
Icon=$ICON_PATH
Categories=GTK;
MimeType=text/html;text/xml;application/xhtml_xml;
StartupNotify=true
EOF

  chmod +x "$DESKTOP_FILE"
}

web2app-remove() {
  if [ "$#" -ne 1 ]; then
    echo "Usage: web2app-remove <AppName>"
    return 1
  fi

  local APP_NAME="$1"
  local ICON_DIR="$HOME/.local/share/applications/icons"
  local DESKTOP_FILE="$HOME/.local/share/applications/${APP_NAME}.desktop"
  local ICON_PATH="${ICON_DIR}/${APP_NAME}.png"

  rm "$DESKTOP_FILE"
  rm "$ICON_PATH"
}

# Move a reference to a .desktop file, like Spotify.desktop, to a named folder, like Xtra.
# Don't use full path for the .desktop file.
app2folder() {
  if [ "$#" -ne 2 ]; then
    local FOLDERS=$(gsettings get org.gnome.desktop.app-folders folder-children | tr -d "[],'")
    echo "Usage: app2folder <desktop_file.desktop> <folder_name>"
    echo "Folders: $FOLDERS"
    return 1
  fi

  local DESKTOP_FILE="$1"
  local FOLDER="$2"
  local SCHEMA="org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/$FOLDER/"
  local CURRENT_APPS=$(gsettings get "$SCHEMA" apps)

  if [[ "$CURRENT_APPS" != *"$DESKTOP_FILE"* ]]; then
    local TRIMMED=$(echo "$CURRENT_APPS" | sed "s/^\[//;s/\]$//")
    gsettings set "$SCHEMA" apps "[$TRIMMED, '$DESKTOP_FILE']"
  fi
}

# Remove desktop app from folder
app2folder-remove() {
  if [ "$#" -ne 2 ]; then
    local FOLDERS=$(gsettings get org.gnome.desktop.app-folders folder-children | tr -d "[],'")
    echo "Usage: app2folder-remove <desktop_file.desktop> <folder_name>"
    echo "Folders: $FOLDERS"
    return 1
  fi

  local DESKTOP_FILE="$1"
  local FOLDER="$2"
  local SCHEMA="org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/$FOLDER/"
  local CURRENT_APPS=$(gsettings get "$SCHEMA" apps)

  if [[ "$CURRENT_APPS" == *"$DESKTOP_FILE"* ]]; then
    local RAW_LIST=$(echo "$CURRENT_APPS" | tr -d "[]'")
    IFS=',' read -ra APPS_ARRAY <<< "$RAW_LIST"

    # Filter out the app to be removed
    local NEW_APPS=()
    for app in "${APPS_ARRAY[@]}"; do
      app=$(echo "$app" | xargs) # trim spaces
      if [[ "$app" != "$DESKTOP_FILE" && -n "$app" ]]; then
        NEW_APPS+=("'$app'")
      fi
    done

    # Join list again
    local NEW_LIST=$(IFS=, ; echo "${NEW_APPS[*]}")

    gsettings set "$SCHEMA" apps "[$NEW_LIST]"
  fi
}

# Ensure that external keyboards that use an fn key has the F keys as the default
alias fix_fkeys='echo 2 | sudo tee /sys/module/hid_apple/parameters/fnmode'
